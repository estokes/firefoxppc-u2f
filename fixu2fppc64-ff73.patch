diff --git a/third_party/rust/authenticator/Cargo.toml b/third_party/rust/authenticator/Cargo.toml
index 5840a9b..6f01604 100644
--- a/third_party/rust/authenticator/Cargo.toml
+++ b/third_party/rust/authenticator/Cargo.toml
@@ -51,3 +51,6 @@ version = "0.6.2"
 [target."cfg(target_os = \"windows\")".dependencies.winapi]
 version = "0.3"
 features = ["handleapi", "hidclass", "hidpi", "hidusage", "setupapi"]
+
+[build-dependencies]
+bindgen = {path = "../bindgen"} 
diff --git a/third_party/rust/authenticator/build.rs b/third_party/rust/authenticator/build.rs
new file mode 100644
index 0000000..c1da248
--- /dev/null
+++ b/third_party/rust/authenticator/build.rs
@@ -0,0 +1,22 @@
+extern crate bindgen;
+
+use std::env;
+use std::path::PathBuf;
+
+#[cfg(not(target_os = "linux"))]
+fn main () {}
+
+#[cfg(target_os = "linux")]
+fn main() {
+    let bindings = bindgen::Builder::default()
+        .header("src/linux/hidwrapper.h")
+        .whitelist_var("_HIDIOCGRDESCSIZE")
+        .whitelist_var("_HIDIOCGRDESC")
+        .generate()
+        .expect("Unable to get hidraw bindings");
+
+    let out_path = PathBuf::from(env::var("TMP").unwrap());
+    bindings
+        .write_to_file(out_path.join("hidrawbindings.rs"))
+        .expect("Couldn't write hidraw bindings");
+}
diff --git a/third_party/rust/authenticator/src/linux/hidraw.rs b/third_party/rust/authenticator/src/linux/hidraw.rs
index 815d72b..c744dff 100644
--- a/third_party/rust/authenticator/src/linux/hidraw.rs
+++ b/third_party/rust/authenticator/src/linux/hidraw.rs
@@ -11,6 +11,7 @@ use std::os::unix::io::RawFd;
 
 use hidproto::*;
 use util::{from_unix_result, io_err};
+use super::hidwrapper::{_HIDIOCGRDESCSIZE, _HIDIOCGRDESC};
 
 #[allow(non_camel_case_types)]
 #[repr(C)]
@@ -19,42 +20,26 @@ pub struct LinuxReportDescriptor {
     value: [u8; 4096],
 }
 
-const NRBITS: u32 = 8;
-const TYPEBITS: u32 = 8;
-
-const READ: u8 = 2;
-const SIZEBITS: u8 = 14;
-
-const NRSHIFT: u32 = 0;
-const TYPESHIFT: u32 = NRSHIFT + NRBITS as u32;
-const SIZESHIFT: u32 = TYPESHIFT + TYPEBITS as u32;
-const DIRSHIFT: u32 = SIZESHIFT + SIZEBITS as u32;
-
-// https://github.com/torvalds/linux/blob/master/include/uapi/linux/hid.h
 const HID_MAX_DESCRIPTOR_SIZE: usize = 4096;
 
-macro_rules! ioctl {
-    ($dir:expr, $name:ident, $ioty:expr, $nr:expr; $ty:ty) => {
-        pub unsafe fn $name(fd: libc::c_int, val: *mut $ty) -> io::Result<libc::c_int> {
-            let size = mem::size_of::<$ty>();
-            let ioc = (($dir as u32) << DIRSHIFT)
-                | (($ioty as u32) << TYPESHIFT)
-                | (($nr as u32) << NRSHIFT)
-                | ((size as u32) << SIZESHIFT);
+#[cfg(not(target_env = "musl"))]
+type IocType = libc::c_ulong;
+#[cfg(target_env = "musl")]
+type IocType = libc::c_int;
 
-            #[cfg(not(target_env = "musl"))]
-            type IocType = libc::c_ulong;
-            #[cfg(target_env = "musl")]
-            type IocType = libc::c_int;
-
-            from_unix_result(libc::ioctl(fd, ioc as IocType, val))
-        }
-    };
+pub unsafe fn hidiocgrdescsize(
+    fd: libc::c_int,
+    val: *mut ::libc::c_int
+) -> io::Result<libc::c_int> {
+    from_unix_result(libc::ioctl(fd, _HIDIOCGRDESCSIZE as IocType, val))
 }
 
-// https://github.com/torvalds/linux/blob/master/include/uapi/linux/hidraw.h
-ioctl!(READ, hidiocgrdescsize, b'H', 0x01; ::libc::c_int);
-ioctl!(READ, hidiocgrdesc, b'H', 0x02; /*struct*/ LinuxReportDescriptor);
+pub unsafe fn hidiocgrdesc(
+    fd: libc::c_int,
+    val: *mut LinuxReportDescriptor
+) -> io::Result<libc::c_int> {
+    from_unix_result(libc::ioctl(fd, _HIDIOCGRDESC as IocType, val))
+}
 
 pub fn is_u2f_device(fd: RawFd) -> bool {
     match read_report_descriptor(fd) {
diff --git a/third_party/rust/authenticator/src/linux/hidwrapper.h b/third_party/rust/authenticator/src/linux/hidwrapper.h
new file mode 100644
index 0000000..ce77e0f
--- /dev/null
+++ b/third_party/rust/authenticator/src/linux/hidwrapper.h
@@ -0,0 +1,12 @@
+#include<sys/ioctl.h>
+#include<linux/hidraw.h>
+
+/* we define these constants to work around the fact that bindgen
+   can't deal with the _IOR macro function. We let cpp deal with it
+   for us. */
+
+const __u32 _HIDIOCGRDESCSIZE = HIDIOCGRDESCSIZE;
+#undef HIDIOCGRDESCSIZE
+
+const __u32 _HIDIOCGRDESC = HIDIOCGRDESC;
+#undef HIDIOCGRDESC
diff --git a/third_party/rust/authenticator/src/linux/hidwrapper.rs b/third_party/rust/authenticator/src/linux/hidwrapper.rs
new file mode 100644
index 0000000..a38a13a
--- /dev/null
+++ b/third_party/rust/authenticator/src/linux/hidwrapper.rs
@@ -0,0 +1,5 @@
+#![allow(non_upper_case_globals)]
+#![allow(non_camel_case_types)]
+#![allow(non_snake_case)]
+
+include!(concat!(env!("TMP"), "/hidrawbindings.rs"));
diff --git a/third_party/rust/authenticator/src/linux/mod.rs b/third_party/rust/authenticator/src/linux/mod.rs
index 6fcd480..00041d2 100644
--- a/third_party/rust/authenticator/src/linux/mod.rs
+++ b/third_party/rust/authenticator/src/linux/mod.rs
@@ -5,5 +5,6 @@
 pub mod device;
 pub mod transaction;
 
+mod hidwrapper;
 mod hidraw;
 mod monitor;
diff --git a/Cargo.toml b/root/Cargo.toml
index 3c3baf5..a4c03d3 100644
--- a/Cargo.toml
+++ b/root/Cargo.toml
@@ -66,5 +66,7 @@ rlbox_lucet_sandbox = { git = "https://github.com/PLSysSec/rlbox_lucet_sandbox/"
 nix = { git = "https://github.com/shravanrn/nix/", branch = "r0.13.1", rev="4af6c367603869a30fddb5ffb0aba2b9477ba92e" }
 spirv_cross = { git = "https://github.com/kvark/spirv_cross", branch = "wgpu" }
+authenticator = { path = "third_party/rust/authenticator" }
+bindgen = { path = "third_party/rust/bindgen" }
 
 [patch.crates-io.cranelift-codegen]
 git = "https://github.com/CraneStation/Cranelift"
diff --git a/third_party/rust/bindgen/Cargo.toml b/third_party/rust/bindgen/Cargo.toml
index e60f466..e0049e5 100644
--- a/third_party/rust/bindgen/Cargo.toml
+++ b/third_party/rust/bindgen/Cargo.toml
@@ -95,7 +95,7 @@ version = "0.1"
 version = "0.1"
 
 [features]
-default = ["logging", "clap", "which-rustfmt"]
+default = ["logging", "clap"]
 logging = ["env_logger", "log"]
 static = []
 testing_only_docs = []

